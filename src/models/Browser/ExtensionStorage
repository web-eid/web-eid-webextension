/*
 * Copyright (c) 2020-2024 Estonian Information System Authority
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

export default interface ExtensionStorage {

  /**
   * Represents the local storage area. Items in local storage are local to the machine the extension was installed on.
   */
  local: StorageArea;

  /**
   * Represents the managed storage area. Items in managed storage are set by the domain administrator and
   * are read-only for the extension. Trying to modify this namespace results in an error.
   */
  managed: StorageArea;

  /**
   * Represents the session storage area. Items in session storage are stored in memory and are not persisted to disk.
   */
  session: StorageArea;

  /**
   * Represents the sync storage area. Items in sync storage are synced by the browser,
   * and are available across all instances of that browser that the user is logged into, across different devices.
   */
  sync: StorageArea;
}

export interface StorageArea {
  /**
   * Retrieves one or more items from the storage area.
   */
  get: (keys: null | string | object | Array<string>) => Promise<Record<string, any>>

  /**
   * Gets the amount of storage space (in bytes) used for one or more items in the storage area.
   */
  getBytesInUse: (keys: null | string | Array<string>) => Promise<number>;
  /**
   * Stores one or more items in the storage area. If the item exists, its value is updated.
   */
  set: (data: Record<string, any>) => Promise<void>;
  /**
   * Removes one or more items from the storage area.
   */
  remove: (keys: string | Array<string>) => Promise<void>;
  /**
   * Removes all items from the storage area.
   */
  clear: () => Promise<void>;
}